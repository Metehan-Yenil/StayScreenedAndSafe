import tkinter as tk
from tkinter import messagebox
import cv2
from PIL import Image, ImageTk
import numpy as np

def insanlari_algila(frame, net):
    height, width, _ = frame.shape
    blob = cv2.dnn.blobFromImage(frame, 1/255.0, (416, 416), swapRB=True, crop=False)

    net.setInput(blob)
    layer_names = net.getLayerNames()
    output_names = [layer_names[i[0] - 1] for i in net.getUnconnectedOutLayers()]

    layer_outputs = net.forward(output_names)

    boxes = []
    confidences = []
    class_ids = []

    for output in layer_outputs:
        for detection in output:
            scores = detection[5:]
            class_id = np.argmax(scores)
            confidence = scores[class_id]
            if confidence > 0.5 and class_id == 0:  # 0: insan sınıfı
                center_x = int(detection[0] * width)
                center_y = int(detection[1] * height)
                w = int(detection[2] * width)
                h = int(detection[3] * height)

                x = int(center_x - w / 2)
                y = int(center_y - h / 2)

                boxes.append([x, y, w, h])
                confidences.append(float(confidence))
                class_ids.append(class_id)

    indexes = cv2.dnn.NMSBoxes(boxes, confidences, 0.5, 0.4)

    for i in range(len(boxes)):
        if i in indexes:
            x, y, w, h = boxes[i]
            cv2.rectangle(frame, (x, y), (x + w, y + h), (255, 0, 0), 2)

    return frame

def kamera_goruntusu_goster():
    messagebox.showinfo("Yüz tanıma kayıt oluşturma",
                        "Lütfen sisteme yüzünüzü tanıtınız! dikkat yüzünüzün görünür çıktığından emin olunuz.")
    kamera = cv2.VideoCapture(0)

    # YOLOv8 modelini yükleme
    net = cv2.dnn.readNet("yolov3.weights", "yolov3.cfg")
    with open("datasets/coco.names", "r") as f:
        classes = f.read().strip().split("\n")

    while True:
        ret, frame = kamera.read()  # Kameradan bir kare
        if not ret:
            break

        frame = insanlari_algila(frame, net)

        frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
        frame = cv2.resize(frame, (pencere_genislik, pencere_yukseklik))
        img = Image.fromarray(frame)
        img_tk = ImageTk.PhotoImage(image=img)  # tkinter için uygun format
        panel.img_tk = img_tk
        panel.config(image=img_tk)
        root.update()

    kamera.release()

root = tk.Tk()
root.title("StayScreenedAndSafe")

# Pencerenin boyutu
pencere_genislik = 600
pencere_yukseklik = 400
ekran_genislik = root.winfo_screenwidth()
ekran_yukseklik = root.winfo_screenheight()
x_pozisyon = (ekran_genislik - pencere_genislik) // 2
y_pozisyon = (ekran_yukseklik - pencere_yukseklik) // 2
root.geometry(f"{pencere_genislik}x{pencere_yukseklik}+{x_pozisyon}+{y_pozisyon}")

# Anlık kamera görüntüsünü göstermek için bir panel oluştur
panel = tk.Label(root)
panel.pack(padx=10, pady=10)

# Pop-up mesajı gösteren düğmeyi oluştur
popup_dugme = tk.Button(root, text="Yüz tanıtma başlat", command=kamera_goruntusu_goster)
popup_dugme.pack(pady=20, side="bottom")

# Uygulamayı başlat
root.mainloop()